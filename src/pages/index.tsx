import getCurrentUser from "@/actions/getCurrentUser";
import getRoomsData from "@/actions/getRoomsData";
import CarouselRoomCard from "@/components/shared/rooms/RoomCard";
import RoomCardSkeleton from "@/components/shared/rooms/RoomCardSkeleton";
import { RoomParams, SafeRoom, SafeUser } from "@/types";
import { useIntersection } from "@mantine/hooks";
import { Box, Button, Container, Grid, Typography } from "@mui/material";
import { useInfiniteQuery } from "@tanstack/react-query";
import axios from "axios";
import Head from "next/head";
import { useEffect, useRef } from "react";
import { useRouter } from "next/router";
import { useRouter as useNavRouter } from "next/navigation";
import queryString from "query-string";

const EmptyResults = () => {
  const router = useNavRouter();
  return (
    <Container sx={{ my: "3rem", paddingBottom: "5rem" }}>
      <Box
        sx={{
          display: "flex",
          flexDirection: "column",
          alignItems: "center",
          textAlign: "center",
        }}
      >
        <Typography
          component="h2"
          sx={{
            fontSize: { xs: "1.4rem", sm: "1.9rem" },
            fontWeight: 500,
          }}
        >
          No exact matches
        </Typography>
        <Typography>Try changing or removing some filters</Typography>
        <Box>
          <Button onClick={() => router.push("/")}>Remove all filters</Button>
        </Box>
      </Box>
    </Container>
  );
};

type HomeProps = {
  currentUser: SafeUser;
  initialRooms: SafeRoom[];
};

export default function Home({ currentUser, initialRooms }: HomeProps) {
  const router = useRouter();
  const searchParams = router.query;

  const { data, fetchNextPage, isFetchingNextPage, hasNextPage } =
    useInfiniteQuery(
      ["rooms", searchParams],
      async ({ pageParam = 1 }) => {
        const response = await axios.get(
          `/api/get-rooms?${queryString.stringify({
            page: pageParam,
            ...searchParams,
          })}`
        );
        return response.data;
      },
      {
        getNextPageParam: (lastPage, allPages) => {
          if (lastPage.length === 0) {
            return null;
          }
          return allPages.length + 1;
        },
        initialData: {
          pages: [initialRooms],
          pageParams: [1],
        },
      }
    );
  const skeletonCount = 6;
  const skeletons = [...Array(skeletonCount)].map((_, i) => (
    <Grid item xs={12} sm={6} md={4} key={i}>
      <RoomCardSkeleton />
    </Grid>
  ));

  const lastRoomRef = useRef<HTMLElement>(null);
  const { ref, entry } = useIntersection({
    root: lastRoomRef.current,
    threshold: 1,
  });

  useEffect(() => {
    if (entry?.isIntersecting && hasNextPage) fetchNextPage();
  }, [entry, hasNextPage]);

  const rooms = data?.pages.flatMap((page) => page);

  if (rooms?.length === 0) {
    return <EmptyResults />;
  }

  return (
    <>
      <Head>
        <title>Vacation Homes & Condo Rentals - Airbnb</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/images/airbnb-icon.svg" />
      </Head>

      <Container sx={{ my: "3rem", paddingBottom: "5rem" }}>
        <Grid
          container
          rowSpacing={1}
          columnSpacing={{ xs: 1, sm: 2, md: 3 }}
          px={"2rem"}
          sx={{
            justifyContent: { xs: "center", md: "flex-start" },
          }}
        >
          {rooms?.map((room, i) => (
            <Grid
              ref={i === rooms.length - 1 ? ref : null}
              item
              xs={12}
              sm={6}
              md={4}
              key={room.id}
            >
              <CarouselRoomCard data={room} currentUser={currentUser} />
            </Grid>
          ))}
          {isFetchingNextPage && hasNextPage && skeletons}
        </Grid>
      </Container>
    </>
  );
}

export async function getServerSideProps({ req, res, query }: any) {
  const initialRooms = await getRoomsData(1, 9, query);
  const currentUser = await getCurrentUser(req, res);
  return {
    props: {
      currentUser,
      initialRooms,
    },
  };
}
